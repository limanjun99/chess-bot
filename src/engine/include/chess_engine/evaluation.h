#pragma once

#include "chess/bitboard.h"
#include "chess/piece.h"

// Piece Square Tables
namespace pst {
// PST values for bishop, king, knight, pawn, queen and rook, from white's perspective.
constexpr int values[6][8][8] = {{
                                     // Bishop.
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                 },
                                 {
                                     // King.
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                 },
                                 {
                                     // Knight.
                                     {8, 12, 16, 16, 16, 16, 12, 8},
                                     {12, 16, 20, 24, 24, 20, 16, 12},
                                     {16, 20, 32, 32, 32, 32, 20, 16},
                                     {16, 24, 32, 32, 32, 32, 24, 16},
                                     {16, 24, 32, 32, 32, 32, 24, 16},
                                     {16, 20, 32, 32, 32, 32, 20, 16},
                                     {12, 16, 20, 24, 24, 20, 16, 12},
                                     {8, 12, 16, 16, 16, 16, 12, 8},
                                 },
                                 {
                                     // Pawn.
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {25, 25, 25, 25, 25, 25, 25, 25},
                                     {20, 20, 20, 20, 20, 20, 20, 20},
                                     {15, 15, 15, 15, 15, 15, 15, 15},
                                     {10, 10, 10, 10, 10, 10, 10, 10},
                                     {5, 5, 5, 5, 5, 5, 5, 5},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                 },
                                 {
                                     // Queen.
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                 },
                                 {
                                     // Rook.
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 0, 0, 0, 0, 0},
                                     {0, 0, 0, 1, 0, 1, 0, 0},
                                 }};

// Returns the PST value of a piece at the given position.
int value_of(Piece piece, u64 at, bool is_white_turn);
};  // namespace pst

inline int pst::value_of(Piece piece, u64 at, bool is_white_turn) {
  int index = bit::to_index(at);
  int y = index / 8;
  int x = index % 8;
  if (is_white_turn) y = 7 - y;
  return pst::values[static_cast<int>(piece)][y][x];
}